import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useAuth } from '../../../contexts/AuthContext';
import './customer.css';

const API_BASE_URL = 'http://localhost:5000';

function CustomerForm({ customerId, customerToEdit, onCustomerAdded, isEditMode = false }) {
  const { currentUser } = useAuth();
  const [form, setForm] = useState({
    customerName: '',
    customerContact: {
      phone: '',
      email: '',
      address: '',
      gstin: '',
    },
    company: '',
    createdBy: '',
  });
  const [successMessage, setSuccessMessage] = useState('');
  const [showFirecracker, setShowFirecracker] = useState(false);

  // Determine the customer ID to use (either from customerId prop or customerToEdit)
  const targetCustomerId = customerId || (customerToEdit ? (customerToEdit.id || customerToEdit._id) : null);

  useEffect(() => {
    if (customerToEdit) {
      // If customerToEdit is provided, use it directly
      setForm(customerToEdit);
    } else if (targetCustomerId) {
      // Otherwise, fetch the customer by ID
      const fetchCustomer = async () => {
        try {
          if (!currentUser) throw new Error('No authentication token');
          const idToken = await currentUser.getIdToken(true);
          const res = await axios.get(`${API_BASE_URL}/api/customers/${targetCustomerId}`, {
            headers: { Authorization: `Bearer ${idToken}` },
          });
          setForm(res.data);
        } catch (err) {
          alert('Failed to fetch customer: ' + err.message);
        }
      };
      fetchCustomer();
    }
  }, [customerToEdit, targetCustomerId, currentUser]);



  const handleChange = (e) => {
    const { name, value } = e.target;
    console.log(`Input changed: ${name} = ${value}`);
    if (['phone', 'email', 'address', 'gstin'].includes(name)) {
      setForm({
        ...form,
        customerContact: { ...form.customerContact, [name]: value },
      });
    } else {
      setForm({ ...form, [name]: value });
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    e.stopPropagation(); // Prevent event from bubbling to flip book
    if (!currentUser) {
      alert('Please log in to add a customer.');
      return;
    }
    try {
      const payload = {
        ...form,
        createdBy: form.createdBy || 'admin',
        lastUpdatedBy: form.createdBy || 'admin',
        company: form.company || 'default_company',
      };
      console.log('Submitting payload:', payload);
      const idToken = await currentUser.getIdToken(true);
      if (targetCustomerId) {
        await axios.put(`${API_BASE_URL}/api/customers/${targetCustomerId}`, payload, {
          headers: { Authorization: `Bearer ${idToken}` },
        });
        setSuccessMessage('Customer updated successfully! ðŸŽ‰');
        if (onCustomerAdded) {
          onCustomerAdded();
        }
      } else {
        const response = await axios.post(`${API_BASE_URL}/api/customers`, payload, {
          headers: { Authorization: `Bearer ${idToken}` },
        });
        const createdCustomer = response.data;
        setSuccessMessage(`Customer added successfully! ðŸŽ‰ (ID: ${createdCustomer.customerId})`);
        if (onCustomerAdded) {
          onCustomerAdded();
        }
      }
      setShowFirecracker(true);
      setTimeout(() => setShowFirecracker(false), 2000);
      setForm({
        customerName: '',
        customerContact: { phone: '', email: '', address: '', gstin: '' },
        company: '',
        createdBy: '',
      });
      setTimeout(() => setSuccessMessage(''), 3000);
    } catch (err) {
      const errorMessage = err.response?.data?.message || err.response?.data?.error || err.message;
      console.error('Submission error:', err);
      console.error('Error response:', err.response?.data);
      alert(`Error saving customer: ${errorMessage}`);
    }
  };

  return (
    <div className="customer-form-container">
      {showFirecracker && (
        <div className="firecracker-overlay">
          <div className="firecracker-particle particle-1"></div>
          <div className="firecracker-particle particle-2"></div>
          <div className="firecracker-particle particle-3"></div>
          <div className="firecracker-particle particle-4"></div>
          <div className="firecracker-particle particle-5"></div>
        </div>
      )}
      
      {successMessage && (
        <div className="success-message">
          {successMessage}
        </div>
      )}

      <form onSubmit={handleSubmit} className="customer-form">
        
        {!targetCustomerId && (
          <div className="form-group">
            <label>Customer ID:</label>
            <input
              type="text"
              value="Auto-generated by system"
              readOnly
              className="form-control"
              style={{ backgroundColor: '#f8f9fa', color: '#6c757d' }}
            />
            <small className="form-text">Customer ID will be automatically generated (CUST-1, CUST-2, etc.)</small>
          </div>
        )}

        {targetCustomerId && (
          <div className="form-group">
            <label>Customer ID:</label>
            <input
              type="text"
              value={form.customerId || 'N/A'}
              readOnly
              className="form-control"
              style={{ backgroundColor: '#f8f9fa', color: '#6c757d' }}
            />
            <small className="form-text">Existing customer ID (cannot be changed)</small>
          </div>
        )}

        <div className="form-group">
          <label>Customer Name *</label>
          <input
            type="text"
            name="customerName"
            value={form.customerName}
            onChange={handleChange}
            className="form-control"
            required
          />
        </div>

        <div className="form-group">
          <label>Phone</label>
          <input
            type="tel"
            name="phone"
            value={form.customerContact.phone}
            onChange={handleChange}
            className="form-control"
          />
        </div>

        <div className="form-group">
          <label>Email</label>
          <input
            type="email"
            name="email"
            value={form.customerContact.email}
            onChange={handleChange}
            className="form-control"
          />
        </div>

        <div className="form-group">
          <label>Address</label>
          <textarea
            name="address"
            value={form.customerContact.address}
            onChange={handleChange}
            className="form-control"
            rows="3"
          />
        </div>

        <div className="form-group">
          <label>GSTIN</label>
          <input
            type="text"
            name="gstin"
            value={form.customerContact.gstin}
            onChange={handleChange}
            className="form-control"
          />
        </div>

        <div className="form-group">
          <label>Company</label>
          <input
            type="text"
            name="company"
            value={form.company}
            onChange={handleChange}
            className="form-control"
          />
        </div>

        <button type="submit" className="submit-btn">
          {targetCustomerId ? 'Update Customer' : 'Add Customer'}
        </button>
      </form>
    </div>
  );
}

export default CustomerForm;